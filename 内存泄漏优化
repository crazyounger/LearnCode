
（1）垃圾回收机制 GC
  java的GC内存回收机制： 某对象不再有任何的引用的时候才会进行回收
 
  GC回收机制的原理：
   可以作为GC Root 引用点的是：
   1 JavaStack中的引用的对象
   2 方法区中静态引用指向的对象
   3 方法区中常量引用指向的对象
   4 Native 方法中JNI 引用的对象
   5 Thread--“活着的的” 线程
（2）如何判断一个对象是垃圾对象 ？
     一个主观的判断。垃圾回收器不能回收，但是我们不需要的对象即为垃圾对象
内存泄漏多了容易导致OOM -- 内存溢出，app会崩溃

二 确定我们项目当中或者某几个类里面是否存在内存泄漏
   1 粗略判断 ： 通过Android Monitor --> System Information -> MemoryUsage
    查看Objects里面是否有 没有被释放的view 或者Activity
    
    命令行模式 adb shell dumpays meminfo 包名 -d
   2 确定内存泄漏的大致范围：
    1） Android studio 方式： 看Memeory Monitor 工具
    
      检查一个一个的动作（activity的跳转动作）
   

  
 三 常见内存泄漏及解决方式
   1 静态变量引起的内存泄漏
   2 非静态内部类引起的内存泄漏
   3 资源未关闭引起的内存泄漏
 
  1 在java中静态变量的生命周期是在类加载时开始，类卸载时结束。换句话说，在android中其生命周期是在进程启动时开始，进程死亡时结束。
  所以在程序的运行期间，如果进程没有被杀死，静态变量就会一直存在，不会被回收掉。如果静态变量强引用了某个Activity中变量，那么这个Activity
  就同样也不会被释放,即便是该Activity执行了onDestroy(不要将执行onDestroy和被回收划等号)。这类问题的解决方案为：1.寻找与该静态变量生
  命周期差不多的替代对象。2.若找不到，将强引用方式改成弱引用
  ```
    public class IMManager {
        private Context context;
        private static IMManager mInstance;

        public static IMManager getInstance(Context context) {
          if (mInstance == null) {
            synchronized (IMManager.class) {
              if (mInstance == null)
                mInstance = new IMManager(context);
            }
          }
          return mInstance;
        }

        private IMManager(Context context) {
          this.context = context;
        }
    }
    
  ```
  当调用getInstance时，如果传入的context是Activity的context。只要这个单例没有被释放，这个Activity也不会被释放。
  解决方案 
  传入Application的context,因为Application的context的生命周期比Activity长，可以理解为Application的context与单例的生命周期一样长，
  传入它是最合适的。
  
  ```
     public class IMManager {
          private Context context;
          private static IMManager mInstance;

          public static IMManager getInstance(Context context) {
            if (mInstance == null) {
              synchronized (IMManager.class) {
                if (mInstance == null)
                  //将传入的context转换成Application的context
                  mInstance = new IMManager(context.getApplicationContext());
              }
            }
            return mInstance;
          }

          private IMManager(Context context) {
            this.context = context;
          }

    }
  ```
    
    2 非静态内部类引起的内存泄漏
    在java中，创建一个非静态的内部类实例，就会引用它的外围实例。如果这个非静态内部类实例做了一些耗时的操作，就会造成外围对象
    不会被回收，从而导致内存泄漏。这类问题的解决方案为：1.将内部类变成静态内部类 2.如果有强引用Activity中的属性，则将该属性
    的引用方式改为弱引用。3.在业务允许的情况下，当Activity执行onDestory时，结束这些耗时任务。
    
    ```
    public class LeakAty extends Activity {
 
        @Override
        protected void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.aty_leak);
          test();
        }

        public void test() {
          //匿名内部类会引用其外围实例LeakAty.this,所以会导致内存泄漏
          new Thread(new Runnable() {

            @Override
            public void run() {
              while (true) {
                try {
                  Thread.sleep(1000);
                } catch (InterruptedException e) {
                  e.printStackTrace();
                }
              }
            }
          }).start();
        }
        }

    ```
    解决方案：
    ```
     public class LeakAty extends Activity {
 
        @Override
        protected void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.aty_leak);
          test();
        }
        //加上static，变成静态匿名内部类
        public static void test() {
          new Thread(new Runnable() {

            @Override
            public void run() {
              while (true) {
                try {
                  Thread.sleep(1000);
                } catch (InterruptedException e) {
                  e.printStackTrace();
                }
              }
            }
          }).start();
        }
    }
    ```
    
    Handler 引起的内存泄漏：
    ```
    public class LeakAty extends Activity {
 
          @Override
          protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.aty_leak);
            fetchData();

          }

          private Handler mHandler = new Handler() {
            public void handleMessage(android.os.Message msg) {
              switch (msg.what) {
              case 0:
                // 刷新数据
                break;
              default:
                break;
              }

            };
          };

          private void fetchData() {
            //获取数据
            mHandler.sendEmptyMessage(0);
          }
      }

    ```    
  mHandler 为匿名内部类实例，会引用外围对象LeakAty.this,如果该Handler在Activity退出时依然还有消息需要处理，那么这个Activity就不会被回收。
  ```
  public class LeakAty extends Activity {
          private TextView tvResult;
          private MyHandler handler;

          @Override
          protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.aty_leak);
            tvResult = (TextView) findViewById(R.id.tvResult);
            handler = new MyHandler(this);
            fetchData();

          }
          //第一步，将Handler改成静态内部类。
          private static class MyHandler extends Handler {
            //第二步，将需要引用Activity的地方，改成弱引用。
            private WeakReference<LeakAty> atyInstance;
            public MyHandler(LeakAty aty) {
              this.atyInstance = new WeakReference<LeakAty>(aty);
            }

            @Override
            public void handleMessage(Message msg) {
              super.handleMessage(msg);
              LeakAty aty = atyInstance == null ? null : atyInstance.get();
              //如果Activity被释放回收了，则不处理这些消息
              if (aty == null||aty.isFinishing()) {
                return;
              }
              aty.tvResult.setText("fetch data success");
            }
          }

          private void fetchData() {
            // 获取数据
            handler.sendEmptyMessage(0);
          }

          @Override
          protected void onDestroy() {
            //第三步，在Activity退出的时候移除回调
            super.onDestroy();
            handler.removeCallbacksAndMessages(null);
          }
    }

  ```
  四、资源未关闭引起的内存泄漏
当使用了BraodcastReceiver、Cursor、Bitmap等资源时，当不需要使用时，需要及时释放掉，若没有释放，则会引起内存泄漏。
